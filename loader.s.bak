[BITS 32]
global loader           ; making entry point visible to linker
extern kmain            ; kmain is defined elsewhere

section .text
; setting up the Multiboot header
align 4
multiboot:
    PAGEALIGN	equ 1<<0				; align loaded modules on page boundaries
    MEMINFO	equ 1<<1				; provide memory map
    FLAGS	equ PAGEALIGN | MEMINFO			; the Multiboot 'flag' field
    MAGIC	equ 0x1BADB002				; lets bootloader find the header
    CHECKSUM	equ -(MAGIC + FLAGS)			; checksum required
    ;EXTERN code, bss, end

    dd MAGIC
    dd FLAGS
    dd CHECKSUM

    dd multiboot
    ;dd code
    ;dd bss
    ;dd end
    dd loader

loader:
    mov esp, stack+STACKSIZE	; set up the stack
    push eax			; pass Multiboot magic number
    push ebx			; pass Multiboot info structure

    cli
    call  kmain			; call kernel proper
    jmp $			; loop forever in case kernel ends unexpexted

section .bss
STACKSIZE equ 0x4000
align 32
stack:
    resb STACKSIZE		; reserve 16k stack on a quadword boundary
